# Makefile: builds the kssl_server and kssl_testclient
#
# Copyright (c) 2013 CloudFlare, Inc.

NAME      := kssl_server
VERSION   := 1.0
ITERATION := $(shell date +%s)
REVISION  := $(shell git log -n1 --pretty=format:%h)

# Turn on absolutely all warnings and turn them into errors

CFLAGS += -g -Wall -Wextra -Wno-unused-parameter -Werror -I.

# Link against OpenSSL and libuv

LDLIBS := -lcrypto -lssl -luv -L.

# This Makefile makes use of the GNU Make Standard Library project
# which can be found at http://gmsl.sf.net/

GMSL_DIR := gmsl/
include $(GMSL_DIR)/gmsl

# Macros for automatically making directories using marker files.
# http://www.cmcrossroads.com/ask-mr-make/6936-making-directories-in-gnu-make
# for rationale.

marker = $1.f
make_dir = $(eval $1.f: ; @mkdir -p $$(dir $$@) ; touch $$@)

TMP := tmp/

OBJ := o/
SERVER_OBJS := $(addprefix $(OBJ)kssl_,server.o helpers.o core.o private_key.o log.o thread.o getopt.o)
TEST_OBJS := $(addprefix $(OBJ)kssl_,helpers.o testclient.o log.o)
OBJS := $(SERVER_OBJS) $(TEST_OBJS)
EXECS := $(addprefix $(OBJ)kssl_,server testclient)

.PHONY: all clean test run kill
all: $(OBJ) $(EXECS)
clean: ; @rm -rf $(OBJ)

## CloudFlare-specific targets and configuration

FPM := fakeroot fpm -C $(BUILD_PATH) \
	-s dir \
	-t deb \
	--deb-compression bzip2 \
	-v $(VERSION) \
	--iteration $(ITERATION)

DEB_PACKAGE          := $(NAME)_$(VERSION)-$(ITERATION)-${REVISION}_amd64.deb
BUILD_PATH           := build
INSTALL_PREFIX       := usr/local
PACKAGE_REGISTER_BIN ?= /usr/bin/register-cf-package.sh
KSSL_BUILD_PATH      := $(BUILD_PATH)/$(INSTALL_PREFIX)/$(NAME)

FPM := fakeroot fpm -C $(BUILD_PATH) \
	-s dir \
	-t deb \
	--deb-compression bzip2 \
	-v $(VERSION) \
	--iteration $(ITERATION)

$(DEB_PACKAGE): clean all
	@mkdir -p $(KSSL_BUILD_PATH)
	@cp o/$(NAME) $(KSSL_BUILD_PATH)
	@$(FPM) -n $(NAME) $(INSTALL_PREFIX)/$(NAME)

register-%.deb: ; @$(PACKAGE_REGISTER_BIN) $*.deb

.PHONY: cf-package
cf-package: $(DEB_PACKAGE)

.PHONY: register-cf-package
register-cf-package: cf-package register-$(DEB_PACKAGE)

.PHONY: clean-package
clean-package:
	@$(RM) -r $(BUILD_PATH)
	@$(RM) $(DEB_PACKAGE)

## end CloudFlare-specific

$(call make_dir,$(TMP))

# Note the use of a # comment at the end of VALGRIND_COMMAND to ensure
# that there is a trailing space

VALGRIND_COMMAND :=
ifeq ($(VALGRIND),1)
VALGRIND_LOG := $(TMP)valgrind.log
VALGRIND_COMMAND := valgrind --leak-check=yes --log-file=$(VALGRIND_LOG) --show-reachable=yes --trace-children=yes #
endif

PORT := $(shell perl free-port.pl)
PID_FILE := $(TMP)kssl_server.pid
SERVER_LOG := $(TMP)kssl_server.log
CA_FILE := CA/cacert.pem
ifneq ($(wildcard $(PID_FILE)),)
PID := $(shell cat $(PID_FILE))
run: ; @echo kssl_server running as PID $(PID)
kill:
	@kill $(PID)
	@rm -f $(PID_FILE)
else
run: export LD_LIBRARY_PATH=/usr/local/lib
run: all $(call marker,$(TMP))
ifeq ($(VALGRIND),1)
	@rm -f $(VALGRIND_LOG)
endif
	@$(VALGRIND_COMMAND)$(OBJ)kssl_server --port=$(PORT) --server-cert=server-cert/cert.pem --server-key=server-cert/key.pem --private-key-directory=keys --cipher-list=ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH --ca-file=$(CA_FILE) --pid-file=$(PID_FILE) --num-workers=4 --silent &
ifeq ($(VALGRIND),1)
	@echo $$! > $(PID_FILE)
endif

kill: ;
endif

# Note that sub-makes are used here for the kill and run targets
# because the definition of those targets changes depending on the
# presence or absence of the kssl_server.pid file (see above) and thus
# it's necessary to restart make for them to do the right thing.

test: export LD_LIBRARY_PATH=/usr/local/lib
test: all
	@$(MAKE) --no-print-directory kill
	@$(MAKE) --no-print-directory run VALGRIND=$(VALGRIND) PORT=$(PORT)
	@perl -e 'while (!-e "$(PID_FILE)") { sleep(1); }'
	@sleep 1
	@$(OBJ)kssl_testclient --port=$(PORT) --private-key=keys/private.key --client-cert=client-cert/cert.pem --client-key=client-cert/key.pem --ca-file=$(CA_FILE) $(DEBUG)
ifeq ($(VALGRIND),1)
	@$(MAKE) --no-print-directory kill
	@echo valgrind log in $(VALGRIND_LOG)
endif

# ABOVE: when running the test suite with valgrind we need the
# kssl_server to terminate; hence the extra $(MAKE) kill at the end

$(OBJ):
	@mkdir -p $@

$(OBJ)kssl_server: $(SERVER_OBJS) ; @$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@
$(OBJ)kssl_testclient: $(TEST_OBJS) ; @$(LINK.o) $^ $(LOADLIBES) $(LDLIBS) -o $@

$(OBJ)%.o: %.c ; @$(COMPILE.c) $(CFLAGS) $(OUTPUT_OPTION) $<

$(OBJ)kssl_server.o: kssl.h
$(OBJ)kssl_testclient.o: kssl.h
